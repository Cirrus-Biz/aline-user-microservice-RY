pipeline {
    environment {
        registryEndpoint = 'aline-user-ry'
        registryCredential = 'ry-aws-credentials'
        THE_BUTLER_SAYS_SO = credentials('ry-aws-credentials')
        dockerImage = ''
    }
    agent any
    stages {
        stage('Package') { 
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true clean package' 
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv(installationName: 'sonarqube') {
                    sh 'mvn sonar:sonar'
                }
            } 
        }
        stage('Build') {
            steps {
                script {
                    dockerImage = docker.build registryURL + registryEndpoint + ":$BUILD_NUMBER"
                }
            }
        }
        stage('Deploy Image') {
            steps {
                script {
                    docker.withRegistry("https://$env.AWS_ECR_REGISTRY", "ecr:$env.AWS_REGION:ry-aws-credentials") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage ('Clean Up') {
            steps {
                sh 'docker rmi $registry:${GIT_COMMIT}'
            }
        }
    }
}





// add to sonarqube:
    // quality gates
    // refactor stages to sonarqube before packages
// add maven test, maven verify, 