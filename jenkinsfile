pipeline {
    environment {
        registryEndpoint = 'aline-user-ry'
        registryCredential = 'ry-aws-credentials'
        THE_BUTLER_SAYS_SO = credentials('ry-aws-credentials')
        dockerImage = ''
        DOCKER_USERNAME = 'AWS'
        AWS_PROFILE = "ry-ecs"
        ecs_a_key = credentials('ry_access_key')
        ecs_s_key = credentials('ry_secret_access_key')
        secret_command = '''aws secretsmanager get-secret-value \\
                    --secret-id RY-aline-environment-variables --query SecretString --output text | jq \'to_entries|map("\\(.key)=\\(.value)")\''''
    }
    agent any
    stages {
        // stage('Maven Test') {
        //     steps {
        //         sh 'mvn test -Dmaven.test.failure.ignore=true'
        //     }
        // }
        // stage('Maven Verify') {
        //     steps {
        //         sh 'mvn verify -Dmaven.test.failure.ignore=true'
        //     }
        // }
        // stage('SonarQube analysis') {
        //     steps {
        //         withSonarQubeEnv(installationName: 'sonarqube') {
        //             sh 'mvn sonar:sonar'
        //         }
        //     } 
        // }
        // stage("Quality gate") {
        //     steps {
        //         waitForQualityGate abortPipeline: true
        //     }
        // }
        // stage('Package') { 
        //     steps {
        //         sh 'mvn -Dmaven.test.failure.ignore=true clean package' 
        //     }
        // }
        // stage('Build') {
        //     steps {
        //         script {
        //             dockerImage = docker.build "$env.AWS_ECR_REGISTRY" + "/" + registryEndpoint + ":${GIT_COMMIT}"
        //         }
        //     }
        // }
        // stage('Publish Image') {
        //     steps {
        //         script {
        //             docker.withRegistry("https://$env.AWS_ECR_REGISTRY", "ecr:$env.AWS_REGION:ry-aws-credentials") {
        //                 dockerImage.push()
        //             }
        //         }
        //     }
        // }
        stage('Wget Docker Compose'){
            steps {
                sh 'wget https://raw.githubusercontent.com/Cirrus-Biz/docker-ry/Feature-CB-88-Docker-Compose-Via-Jenkins/docker-compose.yml'
                sh 'rm docker-compose.yml'
                sh 'curl https://raw.githubusercontent.com/Cirrus-Biz/docker-ry/Feature-CB-88-Docker-Compose-Via-Jenkins/docker-compose.yml'
                sh 'wget https://raw.githubusercontent.com/Cirrus-Biz/docker-ry/Feature-CB-88-Docker-Compose-Via-Jenkins/docker-compose.yml'
            }
        }
        stage('Docker Hard Clean') {
            steps {
                sh 'docker context use default'
                sh 'sudo docker system prune -a --volumes -f'
            }
        }
        stage('ECS Context Creation') {
            steps {
                sh 'echo "Access Key: ${ecs_a_key}"'
                sh 'echo "Access Key: ${ecs_s_key}"'
                sh 'aws configure set aws_access_key_id ${ecs_a_key} --profile ${AWS_PROFILE}'
                sh 'aws configure set aws_secret_access_key_id ${ecs_s_key} --profile ${AWS_PROFILE}'
                sh 'docker context create ecs ${AWS_PROFILE} --profile ${AWS_PROFILE}'
                sh 'docker context use ${AWS_PROFILE}'
                sh 'docker context ls'
            }
        }
        // stage('Docker Compose Up') {
        //     steps {
        //         sh '''aws secretsmanager get-secret-value --secret-id RY-aline-environment-variables | jq -r '.["SecretString"]' | jq '.' | jq -r 'keys[] as \$k | "export \\(\$k)=\\(.[\$k])"' > .env'''
        //         sh 'cat ./.env'
        //         sh '. ./.env'
        //         sh 'echo ${RY_DB_NAME}'
        //         sh 'docker compose -p "RY-aline-finacial" up -d'
        //         sh 'cd -'
        //     }
        // }
        // stage ('Clean Up') {
        //     steps {
        //         sh "docker rmi $env.AWS_ECR_REGISTRY/$registryEndpoint:${GIT_COMMIT}"
        //     }
        // }
    }

    post {
        always {
            sh 'docker context use default'
            sh 'docker context rm ${AWS_PROFILE}'
            sh 'sudo docker system prune --all -f'
            sh 'sudo docker logout'
            sh 'sudo rm ./.env'
            sh 'sudo rm -rf ~/.aws/'
            sh 'sudo rm -rf ~/jenkins/workspace/${JOB_NAME}/*'
            sh 'sudo rm -rf ~/jenkins/workspace/${JOB_NAME}/.git'
        }
    }
}